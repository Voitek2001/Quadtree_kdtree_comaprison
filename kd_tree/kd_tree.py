from typing import Optional, List, Tuple
from sys import stdout

# import sys
# from kd_tree.kd_tree_utils import *
# from kd_tree.geo_types import *
from kd_tree.kd_tree_utils import *
from kd_tree.geo_types import *

from visualizer.visualizer import *


class KDTreeNode(object):

    def __init__(self, points: Optional[List[Point]], point_value: Optional[float], point: Optional[Point]):
        self.value = point_value
        self.points = points
        self.point = point
        self.size_of_subtree = 0
        self.left = None
        self.right = None

    def __str__(self):
        if self.left is None and self.right is None:
            return 'leaf ' + str(self.points) + ' value ' + str(self.value)
        return 'split_node ' + str(self.points) + ' value ' + str(self.value)


class KDTree(object):

    def __init__(self, points: List[Point], dimension: int = 2, vis: bool = False):
        self.points = points
        self.dimension = dimension
        self.vis = vis
        if vis:
            self.visualizer = KDTreeVisualizer(points)
        self.root = self._build_tree(points, 0, [0, 0], [100, 100])

    @staticmethod
    def _split_set_of_points(curr_points: List[Point], curr_dimension: int) -> Tuple[list, list, Point]:
        """
        :param curr_points:
        :param curr_dimension:
        :return: two set of points splitted using median
        """
        median = get_median(curr_points, curr_dimension)
        left_points, right_points = [], []
        for point in curr_points:
            if point == median:
                continue
            if point[curr_dimension] < median[curr_dimension]:
                left_points.append(point)
            else:
                right_points.append(point)

        return left_points, right_points, median

    def _build_tree(self, curr_points: List[Point], depth: int, curr_lower_left: Optional[Point] = None,
                    curr_upper_right: Optional[Point] = None) -> KDTreeNode:
        """
        :param curr_points: set of points to insert into a tree
        :param depth: current recursion depth
        :param curr_lower_left: param for visualization
        :param curr_upper_right: param for visualization
        :return: KDTreeNode and connect them on each recursion level building the tree
        """

        if len(curr_points) < 2:
            if len(curr_points) == 1:
                if self.vis:
                    if depth % self.dimension == 0:
                        self.visualizer.add_line_to_build_stage([[curr_points[0][0], curr_lower_left[1]],
                                                                 [curr_points[0][0], curr_upper_right[1]]])
                    else:
                        self.visualizer.add_line_to_build_stage(
                            [[curr_lower_left[0], curr_points[0][0]], [curr_upper_right[0], curr_points[0][0]]])

                return KDTreeNode(curr_points, curr_points[0][depth % self.dimension], curr_points[0])
            return KDTreeNode(None, None, None)
        left_split_points, right_split_points, median = self._split_set_of_points(curr_points, depth % self.dimension)

        curr_v = KDTreeNode(curr_points, median[depth % self.dimension], median)

        if not self.vis:
            curr_v.left = self._build_tree(left_split_points, depth + 1)
            curr_v.right = self._build_tree(right_split_points, depth + 1)
        else:
            if depth % self.dimension == 0:
                if self.vis:
                    self.visualizer.add_line_to_build_stage([[median[0], curr_lower_left[1]],
                                                         [median[0], curr_upper_right[1]]])
                curr_v.left = self._build_tree(left_split_points, depth + 1, curr_lower_left,
                                               [median[0], curr_upper_right[1]])
                curr_v.right = self._build_tree(right_split_points, depth + 1, [median[0],
                                                                                curr_lower_left[1]], curr_upper_right)
            else:
                if self.vis:
                    self.visualizer.add_line_to_build_stage([[curr_lower_left[0], median[1]],
                                                         [curr_upper_right[0], median[1]]])
                curr_v.left = self._build_tree(left_split_points, depth + 1, curr_lower_left,
                                               [curr_upper_right[0], median[1]])
                curr_v.right = self._build_tree(right_split_points, depth + 1, [curr_lower_left[0],
                                                                                median[1]], curr_upper_right)

        return curr_v

    @staticmethod
    def _is_leaf(node: KDTreeNode) -> bool:
        """
        :param node:
        :return: Boolean value if node doesn't have children (is a leaf)
        """
        if node.left is None and node.right is None:
            return True
        return False

    @staticmethod
    def _check_if_point_inside_rect(rect: Rectangle, point: Point) -> bool:
        """
        :param rect:
        :param point:
        :return: Boolean value if point is inside rect
        """
        if (rect.lower_left[0] <= point[0] <= rect.upper_right[0] and
                rect.lower_left[1] <= point[1] <= rect.upper_right[1]):
            return True
        return False

    @staticmethod
    def _region(curr_node: KDTreeNode) -> Rectangle:
        """
        :param curr_node:
        :return: Area of current node as new Rectangle
        """
        return Rectangle(get_lower_left(curr_node.points), get_upper_right(curr_node.points))

    @staticmethod
    def _check_if_rect_inside_rect(rect1: Rectangle, rect2: Rectangle) -> bool:
        """
        :param rect1:
        :param rect2:
        :return: Boolean value if rectangle rect2 include in whole in rect1
        """
        if rect1.lower_left[0] <= rect2.lower_left[0] and rect2.upper_right[0] <= rect1.upper_right[0] and \
                rect1.lower_left[1] <= rect2.lower_left[1] and rect2.upper_right[1] <= rect1.upper_right[1]:
            return True
        return False

    @staticmethod
    def _check_if_rects_insersect(rect1: Rectangle, rect2: Rectangle) -> bool:
        """
        :param rect1:
        :param rect2:
        :return: Boolean value if rectangles intersect
        """
        if (rect1.lower_left[0] <= rect2.upper_right[0] and rect1.upper_right[0] >= rect2.lower_left[0]
                and rect1.upper_right[1] >= rect2.lower_left[1] and rect1.lower_left[1] <= rect2.upper_right[1]):
            return True
        return False

    @staticmethod
    def _get_intersection_area(rect1: Rectangle, rect2: Rectangle) -> Rectangle:
        """
        :param rect1:
        :param rect2:
        :return: insersection area of rect1 and rect 2 as a new Rectangle
        """
        return Rectangle([max(rect1.lower_left[0], rect2.lower_left[0]), max(rect1.lower_left[1], rect2.lower_left[1])],
                         [min(rect1.upper_right[0], rect2.upper_right[0]),
                          min(rect1.upper_right[1], rect2.upper_right[1])])

    def find_points_in_rectangle(self, x1: float, x2: float, y1: float, y2: float) -> List[Point]:
        """
        :param x1: x coordinate of first point
        :param x2: x coordinate of second point
        :param y1: y coordinate of first point
        :param y2: y coordinate of second point
        :return: all points which are inside the area which create (x1, y1) and (x2, y2) points
        """
        ans_points = []
        rect_inp: Rectangle = Rectangle([x1, y1], [x2, y2])
        if self.vis:
            self.visualizer.clear_find_stage()
            self.visualizer.add_region_to_scene(rect_inp, 'red')

        def _find_points_helper(rect: Rectangle, curr_node: KDTreeNode, depth) -> None:
            nonlocal ans_points

            if self._check_if_point_inside_rect(rect, curr_node.point):
                # print(curr_node.point)
                if self.vis:
                    self.visualizer.add_points_to_find_scene([curr_node.point], 'red')
                ans_points.append(curr_node.point)
            if curr_node.left is not None and curr_node.left.points is not None:
                left_region = self._region(curr_node.left)
                if self.vis:
                    self.visualizer.add_region_for_one_scene(left_region, 'green')
                if self._check_if_rect_inside_rect(rect, left_region):
                    ans_points.extend(curr_node.left.points)
                    if self.vis:
                        self.visualizer.add_points_to_find_scene(curr_node.left.points, 'red')
                elif self._check_if_rects_insersect(rect, left_region):
                    _find_points_helper(rect, curr_node.left, depth + 1)

            if curr_node.right is not None and curr_node.right.points is not None:
                right_region = self._region(curr_node.right)
                if self.vis:
                    self.visualizer.add_region_for_one_scene(right_region, 'green')
                if self._check_if_rect_inside_rect(rect, right_region):
                    ans_points.extend(curr_node.right.points)
                    if self.vis:
                        self.visualizer.add_points_to_find_scene(curr_node.right.points, 'red')
                elif self._check_if_rects_insersect(rect, right_region):
                    _find_points_helper(rect, curr_node.right, depth + 1)

        if self.vis:
            self.visualizer.add_region_for_one_scene(self._region(self.root), 'green')
        if self._check_if_rect_inside_rect(rect_inp, self._region(self.root)):
            ans_points.extend(self.root.points)
        else:
            _find_points_helper(rect_inp, self.root, 0)

        return ans_points

    def print_tree(self):

        def rek(root, sep=''):
            if root is None:
                return
            stdout.write(f'{sep}{root}\n')
            rek(root.left, sep + '  ')
            rek(root.right, sep + '  ')

        rek(self.root)

    # def __init__(self, initial_points, x=0, y=0, width=100, height=100):
    #     pass

    # required functions to test kd-tree

    def find(self, x1, x2, y1, y2):
        self.find_points_in_rectangle(x1, x2, y1, y2)

    def _add_helper(self, curr_node: KDTreeNode, depth: int, new_point) -> None:
        if curr_node.points is None:
            return
        curr_node.points.append(new_point)
        if curr_node.value > new_point[depth % self.dimension]:
            if curr_node.left is not None:
                self._add_helper(curr_node.left, depth + 1, new_point)
            else:
                curr_node.left = KDTreeNode([new_point], new_point[depth % self.dimension], new_point)
            return
        else:
            if curr_node.right is not None:
                self._add_helper(curr_node.right, depth + 1, new_point)
            else:
                curr_node.right = KDTreeNode([new_point], new_point[depth % self.dimension], new_point)
            return
    def add(self, new_point):
        self._add_helper(self.root, 0, new_point)

    def visualized_find(self, x1, x2, y1, y2):
        self.find_points_in_rectangle(x1, x2, y1, y2)

    # jeżeli przy inicjalizacji kd_tree ustawisz vis=True
    # to sceny budowy jak i znajdowania punktów
    # zapisują się w:
    #           self.visualizer : KDTreeVisualizer (w pliku visualizer.visualizer)
    # vis_build zwraca liste scen z budowy drzewa
    # vis_find zwaraca liste scen z poszukiwania
    # lista scen z vis_find to sceny z ostatniego wywołania find

    def vis_build(self):
        return self.visualizer.build_scenes

    def vis_find(self) -> Optional[List[Scene]]:
        if self.visualizer is None:
            stdout.write('Struktura była zainicjalizowana bez właczonego parametru wizualizacji\n')
            return None
        if not len(self.visualizer.find_scenes):
            stdout.write('Brak wywołania find')
            return None
        return self.visualizer.find_scenes

'''
BUILDTREE(P, depth)
if P zawiera tylko jeden punkt
    then return liść pamietający ten punkt
    else if depth jest parzyste
        then podziel P pionową prostą l na zbiory P1 i P2
        else podziel P poziomą prostą l na zbiory P1 i P2

        vl <- BUILDTREE(P1, depth+1)
        vp <- BUILDTREE(P2, depth+1)
        stwórz węzła v - ojca vl i vp oraz zapamietaj w nim l   
'''
'''
SEARCHKD(v, R)
if v jest liściem then
    if v należy R then zwróć v
    else
        if region(ls(v)) zawiera sie w R
        then zwróc wszystkie liście poddrzewa o korzeniu w ls(v)
        else if region(ls(v)) przecina R then
                SEARCHKD(ls(v), R)
        if region(rs(v)) zawiera sie w R
            then zwróc wszystkie liście poddrzewa o korzeniu w rs(v)
            else if region(rs(v)) przecina R then
                SEARCHKD(rs(v), R)
'''


if __name__ == '__main__':


    points = [[3, 6], [17, 15],
              [13, 15.5], [6, 12],
              [9, 1], [2, 7],
              [10, 19]]



    points = [[77.83264519322685, 39.64470412202374], [63.245488996170195, 42.591398072821924], [81.51243222619533, 43.608800112731316], [59.88765966257701, 51.60327210185986], [80.57826131670467, 54.05196573467928], [82.14367781197927, 67.92967511705999], [76.28849817442934, 46.13722962127747], [63.01043007964241, 40.807624430565795], [91.04251942224734, 51.0176706826809], [73.50858206795262, 29.821603742515357], [64.25922102213748, 41.65952947893338], [76.92671122736017, 58.36367240955635], [69.15575713898184, 65.11957352339354], [81.04667259795805, 54.655355853295745], [71.27942908673802, 58.24102973312417], [69.43615672263252, 51.84065537895089], [74.56646307450578, 49.23681014347313], [60.96263089138935, 59.88186927139468], [56.10989994590069, 47.01414916218923], [62.37676838701721, 53.40652073551294], [50.716467739655826, 51.98045698085072], [78.04136488488052, 50.525148085456046], [80.32288255094073, 35.84423936396479], [85.63619728414623, 26.587292720540486], [73.82891737049506, 67.88348857060353], [54.15950356204175, 37.48737248567595], [44.792266846968495, 57.797391308034236], [77.2067825699835, 33.73223302199455], [78.23541834811998, 24.260612496459387], [66.54117464175744, 45.57473467387356], [63.205385486662735, 36.23642492858809], [73.8604642868552, 37.00656263269174], [83.8674645805228, 41.436079459892326], [72.23001317013092, 61.01903721956345], [50.66744460824262, 44.38494489662033], [82.74422881757586, 48.882596615712494], [68.25893610645682, 62.68141224146393], [55.56663455397325, 61.49571772767094], [52.78675423141601, 40.81617712722047], [74.63067799485995, 29.495782904853133], [84.74693427943521, 53.82229572867333], [81.3017717200513, 51.41944331567574], [78.27060526339038, 70.8252961213824], [77.35604294558199, 66.51592265972951], [69.14298084921606, 53.7593290929176], [91.67205649552216, 54.782403636611775], [63.532465028911005, 59.63406501802718], [98.7814442469043, 62.20187319245419], [72.0829974721233, 55.284995623230415], [56.54931718379633, 55.77519498485985], [80.8231164178555, 38.16050445612285], [74.15709056829006, 43.92773259881638], [63.8636651291116, 50.43687942937574], [87.84045030132557, 34.729965634148], [82.75360559999625, 25.129088266117524], [75.81577951793493, 57.10223874990473], [61.70746537003055, 59.22850873085331], [68.93551547298122, 43.78148417560659], [94.8718111710541, 46.06657416005219], [79.42600240141934, 45.31252530035941], [73.77555576997074, 26.817866246309972], [66.44211814049423, 57.406052478598205], [68.78983029205631, 75.50353449757304], [80.00576305443224, 43.89673828526389], [63.4809774517653, 49.838666871789876], [52.24471474596132, 54.782401033654985], [75.55800336956666, 83.26009117327985], [95.72198403407637, 52.977959576034685], [90.30365889907256, 70.87630598303829], [83.3807127458518, 47.44968284625992], [84.97871090869992, 59.46253784102004], [89.0726263815993, 32.93964460585083], [71.45663275369321, 66.21253733969263], [87.5651266629669, 68.77265016483182], [94.37334104595905, 44.93429862997064], [92.04778962601111, 71.04240337013456], [95.55293647607127, 63.97981802068724], [83.38745512302303, 55.6056429734771], [85.24424933958116, 46.08575575058322], [89.39529598614605, 57.22455475359712], [98.13086819343708, 46.79764186856585], [69.73520208267371, 51.329897993819195], [84.2069089105355, 45.67312083964549], [99.48037619389125, 75.95526962497301], [96.70538166502723, 62.64799444296079], [89.98273828046432, 49.75376825813558], [99.96422033507632, 88.16866410453301], [91.22219117410263, 52.581060933489304], [88.67678951060174, 41.76931666699645], [92.90160135404022, 58.988569208545826], [79.84692696778268, 61.88078725855331], [99.78523921838793, 18.70312937156762], [93.07290712424575, 65.33308877499937], [90.12204151844693, 48.56652143585375], [94.41717067796563, 67.92929833417371], [88.87450829822735, 71.02185475522806], [88.94522689706685, 44.97211103110851], [92.50514849028276, 50.35014511123236], [97.77362768195731, 56.281058113917524], [88.1759071359057, 51.80684672451875], [95.36092404967839, 57.20304591869753], [91.68038735556615, 57.098477848617094], [97.2551304773247, 62.84303911289907], [91.41777023711539, 35.00864194519622], [97.21718751906509, 48.67194349823033], [82.54490059666139, 60.79856615500274], [94.51609640328694, 27.532345659156412], [32.29363800344835, 26.668417187925485], [9.982510435678893, 16.468958081706926], [24.658661163250656, 6.269853400155441], [51.26010436080126, 30.41161731845792], [14.2971109915416, 34.026006361723766], [28.167883637512798, 5.870743043775581], [23.164244031508765, 22.086085324576075], [34.974040301106996, 20.510162159740982], [30.58746115533679, 10.531561087822599], [30.437391867161942, 42.060448310954214], [33.64899909118271, 2.070894597980949], [35.000061384795394, 20.720741676345455], [28.2767211433464, 19.892406821907375], [53.19084327953808, 32.38651997176155], [23.991406319239793, 31.894636951888977], [25.955240735596806, 30.500080256190632], [39.13540422984961, 22.917691289692446], [14.664574617699778, 32.687682416139154], [31.258190505177726, 8.694976963292811], [51.33726948483926, 23.696547102165074], [17.15537669048946, 32.22117987174409], [32.3980518105801, 35.810564335772995], [33.32225572154637, 21.878091852902823], [18.601405386257788, 14.393364698034283], [41.78140665548468, 14.753546980368306], [27.115518092197235, 3.501620026503236], [18.540958366686795, 12.921433635431972], [31.497693363325222, 29.747343614594538], [41.47103903686509, 13.293526029589662], [26.151954214402082, 26.06002817762731], [34.7314426714763, 9.234392907335026], [37.31617382227226, 45.70162817274041], [27.443841855396332, 28.74763698903959], [24.126261808905323, 18.311383192291522], [42.01123094960853, 3.4161329202622923], [33.43323420242955, 28.306097879093038], [47.24446902919949, 3.0531089557666355], [37.00461891253088, 32.79487831674409], [28.729421109603287, 31.642323621800934], [26.837436008386646, 6.617820897918072], [28.25823938522478, 31.50271628129781], [28.15632031202338, 17.189816631958717], [42.62331260930661, 10.802155314287262], [15.016173581850678, 3.501227119996596], [49.597332267239665, 24.407518714719618], [31.596988985930018, 24.869580801170144], [20.128844416723652, 27.635814506934416], [32.347160803260095, 0.7918468500051965], [36.53675818479068, 31.327565368799107], [19.85522509927327, 22.86643015681668], [29.322261778485, 17.633749210325494], [36.161171070896934, 51.3403412794058], [40.84452643482807, 11.624317247776164], [36.915621530098704, 37.49700174112547], [39.532156958836154, 22.797759786612243], [4.77406094764185, 34.06628594196298], [27.187973979449993, 29.188623356352334], [13.23889378391006, 52.971230567666396], [28.060233450907695, 14.762265975643558], [19.653116669742772, 0.10156838504931187], [23.030867123229655, 10.36814721012279], [15.525681572680346, 20.964409685687162], [14.364588616399057, 24.70280628273781], [12.937361213589487, 25.372850148601785]]
    points2 = [[7.857123063737193, 50.0], [43.614712810235055, 50.0], [59.80236836065694, 50.0], [8.70453567488153, 50.0], [7.082759849935982, 50.0], [45.152482139725905, 50.0], [59.44682959837628, 50.0], [38.3745499253046, 50.0], [18.77643872298631, 50.0], [26.79454080110588, 50.0], [77.31030335075579, 50.0], [37.03966143424909, 50.0], [40.57136775350487, 50.0], [90.90022842511142, 50.0], [30.4463243039805, 50.0], [83.45592876090153, 50.0], [33.709438963448044, 50.0], [53.79745271886354, 50.0], [41.86944453736452, 50.0], [70.2360033911039, 50.0], [57.22085331753753, 50.0], [76.1831262230308, 50.0], [74.84793014604637, 50.0], [44.23418785612753, 50.0], [13.615629039695797, 50.0], [44.07649480023979, 50.0], [66.38578109370872, 50.0], [3.9213064567115707, 50.0], [36.91321792100768, 50.0], [37.07214340479516, 50.0], [56.13651132296174, 50.0], [71.24042668210025, 50.0], [13.709073921542315, 50.0], [1.9471166100738846, 50.0], [47.432435659970636, 50.0], [28.804819172988815, 50.0], [54.25470578785704, 50.0], [69.50091777441585, 50.0], [63.16198001200437, 50.0], [84.03426111466494, 50.0], [78.35337684326143, 50.0], [15.681990087359242, 50.0], [28.654051129780445, 50.0], [27.7186848505119, 50.0], [56.433405301076746, 50.0], [20.475273329474895, 50.0], [64.09003334348824, 50.0], [32.45876907670281, 50.0], [97.188079104614, 50.0], [95.33854689326476, 50.0], [30.08186720404067, 50.0], [79.2731894133365, 50.0], [22.204237130106275, 50.0], [97.50404311115533, 50.0], [78.73220186292961, 50.0], [36.234656295029396, 50.0], [37.47609008055524, 50.0], [65.90253940318166, 50.0], [62.929989011107835, 50.0], [1.1199053584967311, 50.0], [29.198498670991913, 50.0], [29.058057056696462, 50.0], [92.84506392803826, 50.0], [91.38087803036815, 50.0], [8.944805524938438, 50.0], [19.9642904382334, 50.0], [70.07307702240463, 50.0], [12.456474909271941, 50.0], [24.478560547531348, 50.0], [88.11441909859792, 50.0], [33.208224726953716, 50.0], [47.23943279605132, 50.0], [23.07099332746233, 50.0], [30.071748408277866, 50.0], [52.175052071126935, 50.0], [21.203785206130178, 50.0], [21.175016453269023, 50.0], [85.36412161066889, 50.0], [9.317246764790976, 50.0], [66.18409916917824, 50.0], [92.35747034007672, 50.0], [73.53170055722754, 50.0], [79.7312233478266, 50.0], [50.86488408258861, 50.0], [96.54832697848033, 50.0], [33.87724637824301, 50.0], [9.564350652782839, 50.0], [79.73562961745154, 50.0], [95.87442586619909, 50.0], [36.52509714873009, 50.0], [55.51064276086004, 50.0], [17.584987232014036, 50.0], [73.03171092281457, 50.0], [20.19720879453978, 50.0], [84.14692150326555, 50.0], [63.54465144555238, 50.0], [57.45421921408232, 50.0], [30.38468396320836, 50.0], [28.102638083448596, 50.0], [3.3918794935915986, 50.0], [50.0, 13.161604833075968], [50.0, 58.91864575867596], [50.0, 35.042372536933605], [50.0, 99.57855430680678], [50.0, 10.516065626614457], [50.0, 21.2906068158913], [50.0, 73.29298976595305], [50.0, 79.42002517448078], [50.0, 9.410276754850845], [50.0, 87.36579759607456], [50.0, 63.75715649291682], [50.0, 14.333557771723825], [50.0, 10.273944629166976], [50.0, 63.47928590022806], [50.0, 81.56152507851542], [50.0, 99.65659748702937], [50.0, 13.614454546949094], [50.0, 96.82119459148484], [50.0, 45.429426039022204], [50.0, 22.582381681073947], [50.0, 27.162761861371333], [50.0, 53.60696502560537], [50.0, 68.15260814945825], [50.0, 74.98535149504028], [50.0, 11.927285369544338], [50.0, 67.08673631546243], [50.0, 63.39369791994353], [50.0, 90.37748627877514], [50.0, 75.14749781774928], [50.0, 93.43068374285326], [50.0, 34.72501147273791], [50.0, 84.45918422024293], [50.0, 69.68046441938546], [50.0, 99.56079535139116], [50.0, 58.05809904464946], [50.0, 69.52632392090916], [50.0, 96.7902767012096], [50.0, 20.109651393592976], [50.0, 25.397286588659185], [50.0, 53.32971315737732], [50.0, 75.76424284062672], [50.0, 64.9167416706215], [50.0, 79.16132024999507], [50.0, 35.479200465806294], [50.0, 73.09361723178925], [50.0, 16.2681945671974], [50.0, 96.5448476270081], [50.0, 0.700888043059622], [50.0, 70.23881391986205], [50.0, 20.254122702022226], [50.0, 82.61423100431685], [50.0, 17.350912425897157], [50.0, 55.492684869732436], [50.0, 23.35499492329425], [50.0, 3.601190375729446], [50.0, 65.32584195100475], [50.0, 13.052146121871822], [50.0, 90.01188214871586], [50.0, 49.79743672603735], [50.0, 85.31066430129972], [50.0, 52.7307875558588], [50.0, 29.76156361279909], [50.0, 92.09695346401604], [50.0, 82.01050615202512], [50.0, 64.94757218118255], [50.0, 17.93701689576408], [50.0, 94.10892142302895], [50.0, 69.25856217839986], [50.0, 39.9430755352906], [50.0, 22.62122196640076], [50.0, 93.65197506939576], [50.0, 77.29753461205595], [50.0, 0.30792762151450326], [50.0, 37.89774294482838], [50.0, 73.80016837598087], [50.0, 55.17314625202493], [50.0, 86.33101394033534], [50.0, 19.64289540246158], [50.0, 70.21112670077349], [50.0, 27.992502937802822], [50.0, 81.96476357096805], [50.0, 10.441536537284568], [50.0, 96.31939952683288], [50.0, 80.41905923283714], [50.0, 77.7635179406356], [50.0, 14.296363060602301], [50.0, 67.72455638815507], [50.0, 31.566306089871176], [50.0, 55.76595043201383], [50.0, 36.40925506197013], [50.0, 58.4393342836465], [50.0, 31.702156467559806], [50.0, 61.81386182233606], [50.0, 5.4096107802774185], [50.0, 35.2882238874888], [50.0, 2.1395979061256787], [50.0, 26.215417696817834], [50.0, 81.73208858097838], [50.0, 22.66854872721441], [50.0, 17.966397452411652]]
    points3 = [[0.0, 0.0], [0.0, 25.0], [0.0, 50.0], [0.0, 75.0], [25.0, 0.0], [25.0, 25.0], [25.0, 50.0], [25.0, 75.0], [50.0, 0.0], [50.0, 25.0], [50.0, 50.0], [50.0, 75.0], [75.0, 0.0], [75.0, 25.0], [75.0, 50.0], [75.0, 75.0]]
    points4 = [[48.13660136287946, 44.05790254054772], [51.781043355419996, 52.96811809229019], [43.6709147866524, 51.61278264827702], [42.82137060486775, 29.45507143132438], [51.39684988581705, 47.30327120374888], [73.1571731394276, 40.134632750897914], [48.15864492661499, 50.68088825148182], [41.61811660696163, 60.93367855164733], [34.39710445475116, 46.23599774158637], [42.97830784799173, 22.475407322098683], [29.889347428144877, 70.68355907356539], [64.20272699501677, 62.58963110918562], [56.150592035859724, 33.482199096257105], [51.014397900607285, 56.74447172587222], [77.29162606126035, 48.84786087491017], [50.49973595809667, 66.27853546144783], [37.51268058537838, 34.13038648959259], [61.204730128617975, 34.44439713889162], [34.83527087842859, 44.4268911875163], [51.498131053781236, 28.52739553684777], [44.29307413690546, 55.61035003193128], [43.1455517963201, 36.9302604951899], [50.08060534681209, 72.45789471334193], [63.46307867483585, 26.679930887667382], [43.89709148394772, 43.46546715161107], [28.75912090644464, 47.16173634717342], [51.32058635390453, 33.04405987092895], [59.42134095586931, 46.71488856969672], [63.55204217434074, 65.76700111367441], [52.87468855358927, 61.75864935764633], [58.69221013764725, 41.977060412730616], [51.136679253907076, 43.66142844986924], [60.79248983067621, 79.39293015316608], [60.040946317130185, 60.47975334072082], [33.75114469353195, 61.439599951725114], [27.262877748643714, 50.81337476394944], [57.67356763555867, 42.23094355863688], [51.56607419831212, 53.74763466405313], [25.998915702209473, 53.63769840958521], [25.46926070232731, 40.44285524055279], [40.569650220499184, 46.95175221136294], [46.43940027551609, 42.06618369632744], [35.28489638992248, 68.0378250368986], [51.38090018282832, 59.66623557484086], [53.092936640720346, 71.84399408388823], [45.517438851789436, 45.52467859891338], [55.41893348136821, 28.46338301537861], [40.14299335952616, 31.1560845950805], [30.425879222076386, 62.151987551167096], [60.896487791320695, 45.66497724178193], [54.88478928976476, 45.01878140723892], [53.9748105912656, 48.041745436455955], [40.83093323319463, 52.64176298079435], [47.45744531061547, 48.55307932792224], [60.502884674021665, 23.815913049135872], [50.66024632314174, 60.93564172442388], [48.49163031331559, 47.54443706289428], [39.090513042770105, 71.17269200316022], [64.05508402445162, 33.75672256799923], [19.774215664290384, 40.233946346278934], [70.15495614743168, 47.25680089974193], [46.810356617824766, 49.56192073393099], [49.94073876707696, 72.74123888775497], [41.437283354052454, 60.0471809231591], [48.77729300858611, 43.669692094702434], [15.622188172991898, 69.28997382850596], [64.16130832275539, 59.42885059053556], [56.59669360074668, 43.8209979712757], [52.02804250132152, 43.51617683286566], [30.339444486329047, 52.25487902310909], [49.7462225511224, 40.2477631804464], [64.23224595381718, 59.09967078580101], [67.07876089314306, 46.3096136760493], [42.571479274025116, 47.96006839415019], [41.61725951771819, 64.20946373491789], [28.629577394439945, 48.17651953625858], [41.807506395816844, 39.21042872056635], [40.487540143312174, 51.40809665532265], [53.30963041159843, 72.6629576746316], [36.7277221691211, 37.97657808833174], [63.91087517346523, 27.41183295788533], [43.476058118614326, 37.84568890000634], [44.71429544516976, 60.851200756231755], [46.77858714546604, 42.08879635255034], [51.705547749819615, 48.354461432274206], [61.24040112994105, 50.05633580811677], [33.14884606073089, 53.64037381282464], [24.59953209521606, 49.555938855156185], [66.7644021342364, 55.982222343054666], [43.43115414641837, 65.74190539660428], [45.08614802661736, 45.448936102352256], [32.620902616774, 41.58327392204398], [31.035717536536847, 59.4208138932746], [48.18285863369606, 42.32143803595006], [57.081522735190575, 44.20416151035049], [50.616893350496966, 47.77942614553916], [34.145112200660805, 62.07987389347939], [54.531432330983286, 38.77925267821029], [20.934271180989043, 55.036885118197546], [66.75375754457676, 40.37055515613143]]
    points5 = [[100, 97.83435088725837], [53.193047213256285, 100], [49.79311296005514, 100], [0, 25.965277572833656], [0, 12.542212554337128], [100, 12.44024915377021], [0, 79.96878356906095], [75.0005647219438, 100], [0, 63.133073637839146], [0, 9.702560493659739], [0, 89.90985358708457], [100, 18.646329963361154], [12.306337767936393, 100], [91.91045063432759, 100], [0, 62.73661939005408], [100, 66.53095583737654], [0, 80.91275944849856], [100, 26.347549827147898], [54.789519214236435, 0], [12.820719152140537, 0], [0, 80.67589478985168], [68.98730794861434, 100], [28.045660053315423, 0], [40.470848010234995, 100], [100, 41.77177182683334], [59.18647036814324, 0], [100, 14.872004476349588], [100, 24.638085943278742], [35.769742378791236, 0], [20.741742131032126, 0], [0, 23.601941371254664], [72.41838536932944, 100], [29.689216962543895, 100], [1.5682556696216432, 100], [18.382911919819644, 0], [0, 45.640902817692954], [88.39025430507127, 100], [100, 13.070758330715826], [100, 17.76752575364837], [100, 39.85352289781496], [0, 23.00789653820653], [75.33793585040546, 0], [0, 84.68869594183722], [100, 79.97500383728686], [0, 83.11173936026258], [0, 6.57551154805367], [0, 64.9206831024156], [0.239298531331833, 100], [0, 88.43748835381345], [98.16358039318897, 0], [41.10510141717382, 100], [40.40113906495334, 0], [100, 10.168546471172569], [79.46198900923582, 100], [21.47497452230247, 0], [0, 9.289550551059666], [21.013442003298977, 100], [56.64457235113538, 100], [100, 71.96737917937389], [0, 38.25210575711206], [0, 36.340586782268566], [100, 98.17077154944205], [100, 9.518266672809839], [28.972077769871508, 0], [0, 64.56423683859951], [14.737173920023883, 100], [100, 80.77343831050048], [0, 63.28265151477663], [96.22556064790169, 0], [100, 29.54798344769677], [0, 15.317821794648257], [0, 31.924569420220738], [89.1359274098607, 0], [100, 85.64604976670283], [77.54694473862646, 100], [0, 76.56490508520913], [62.66588496341336, 100], [100, 96.33081436547707], [0, 21.02848326016581], [4.369260003561148, 0], [31.93157153263084, 0], [100, 62.79023645551963], [0, 58.92196816601819], [20.521387485785137, 100], [0, 45.36312475118888], [80.76798490998905, 0], [100, 46.319605434374225], [100, 46.56119521697894], [0, 23.04045027403131], [0, 73.82931591835076], [100, 22.749677349824402], [83.66000532729278, 100], [51.28626055400874, 0], [100, 12.687408445367632], [39.34118273411881, 0], [0, 53.860669880624876], [30.13395975055243, 100], [0, 0.5629970241470494], [100, 91.59614062540538], [16.89170150718474, 100]]
    points6 = [[94.98145871087402, 68.49634292879708], [39.69310627799537, 81.54403088381463], [40.81446380818933, 17.239994795173384], [62.58957010209322, 9.197193708604367], [47.27883895102114, 17.963014729840754], [23.243427641351, 56.27744542950681], [19.642918023264055, 77.08038037194727], [26.753198601969196, 57.21447864707475], [15.928683543555078, 20.912232960788103], [12.459222268679893, 21.250872784086795], [49.2807477568059, 10.35190223947582], [14.759612799800081, 2.141669098145793], [80.8447409666305, 66.66177813774584], [5.303881721061798, 99.18762827527085], [80.26541839724968, 82.35448670189984], [95.4446049468465, 67.55414822979108], [3.4615105214407915, 67.98013402576522], [70.5265461415293, 65.89152083357145], [7.080188185273018, 57.47739775886566], [31.905729491428716, 33.679122065069876], [57.707813858863574, 83.51637080768425], [81.4201794059461, 21.869024863444675], [87.98297532427956, 22.1489079152447], [74.77615561997355, 24.792527849317615], [74.40637251348473, 45.982995080560286], [31.689464249584308, 69.195234040546], [52.35383330880868, 2.793043973063969], [48.54683243207414, 39.77025552254544], [99.96860623733349, 85.08569120129108], [88.88502306387453, 26.327331359563132], [81.22941593589294, 86.1455761748713], [68.20328437799907, 16.20712298049256], [14.958383479720283, 86.3869868036028], [9.157605804162994, 31.279134139108233], [32.65408890674535, 89.43312076580753], [68.39998841404278, 48.067228040926736], [5.911474462423561, 66.94442321404216], [12.090817687026846, 82.70428064350202], [38.49909075763639, 67.67449345358688], [88.69778819897655, 25.88435320323528], [82.75710766831259, 10.479892700678073], [48.23930694164464, 22.86445747458391], [78.31809986018263, 73.33031442600453], [73.30206431358425, 90.02733204343821], [17.25439405275422, 75.69092481727063], [33.7266778077703, 22.591016294292388], [80.05762184927066, 67.36648285855506], [60.513675407662646, 6.904851119083388], [52.82222126277873, 0.6775320076493951], [40.38662880525785, 77.91588226444695], [23.832970569196167, 18.054674013735994], [27.90920277410369, 58.255400303600304], [69.66585254454161, 56.74356549111658], [16.41402630442892, 59.60442326457706], [42.28608009229482, 51.037668482364985], [92.1453503627337, 50.66076328010227], [69.57129910472642, 61.792174545245494], [72.42569428037955, 58.237488722811705], [13.140706782780365, 89.20525312426115], [85.30791221346101, 95.52727322831063], [92.5227020079114, 36.8819660530943], [25.578157558238424, 70.1187830405665], [68.60933643933154, 64.47319552546506], [81.01936765970565, 72.27572961077627], [58.223793393252635, 29.384533609279295], [14.1132474672782, 23.190796727861052], [13.792911807970054, 33.84663482805621], [15.21741786461691, 59.058093625836975], [95.99180345258796, 74.76918769023752], [26.124066395840895, 78.05296298996232], [83.2350075113423, 60.3815995322369], [80.02273353840056, 2.304013269834704], [54.565417540729285, 39.48798540240291], [92.66013093152313, 37.03189018741], [75.67160908295459, 84.24314450397831], [11.278051636703001, 70.0885844061537], [81.79097500168945, 55.46197022609958], [93.72434879979595, 89.42751076670224], [62.81531113925601, 40.907293673819645], [70.5609088663557, 27.60664258699428], [71.19536552865857, 97.66195032023617], [23.920842854658908, 5.320191969153642], [85.66052261073335, 36.85148301383744], [72.0010233316747, 40.971502644977335], [76.765870661417, 48.39590172363566], [5.757620472150404, 98.34126999395504], [77.909673209769, 57.879572146192515], [16.155432692245817, 99.29586662052485], [48.307055330242044, 40.89900220588715], [70.41902456931707, 88.8830827578437], [0.5353632458552582, 59.731764612395835], [68.45191296146612, 58.303488366541835], [63.133672347776816, 93.90440446709931], [75.83271252881511, 6.998886187693887], [40.419135980239616, 43.896344613677726], [2.624360345278154, 80.31068850481387], [21.875965549484256, 8.867284200115332], [2.1486649991762974, 61.403758939518696], [30.024619617808813, 69.5256164734755], [31.727186276045614, 28.620519841935476]]
    # test.add([14.5, 16.5])

    # test.print_tree()
    p = [points, points2,
         points3, points4,
         points5, points6]
    for points in p:
        test = KDTree(points, 2, True)
        stdout.write(f'{test.find_points_in_rectangle(0, 70, 0, 70)}\n')
        scenes = test.vis_build()
        plot = Plot(scenes=scenes)
        plot.draw()

        b = test.vis_find()
        plot2 = Plot(scenes=b)
        plot2.draw()

